name: CI/CD - Build --> Push Imagen Docker -> Actualizar Helm

on:
  push:
    branches: [main]

env:
  IMAGE_NAME: leferbadck/meteolive
  VERSION: 1.0.${{ github.run_number }}         # Para .NET
  VERSION_TAG: v1.0.${{ github.run_number }}    # Para Docker

jobs:
  test-build-docker-push-helm:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout código
      uses: actions/checkout@v3

    - name: Instalar .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Restaurar dependencias
      run: dotnet restore MeteoService/MeteoService.csproj

    - name: Compilar proyecto
      run: dotnet publish MeteoService/MeteoService.csproj -c Release -o out

    - name: Install SonarScanner
      run: dotnet tool install --global dotnet-sonarscanner

    - name: Inicia Analisis con SonarCloud
      run: |
        dotnet sonarscanner begin \
          /k:"leferba1981_meteolive" \
          /o:"leferba1981" \
          /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
          /d:sonar.host.url="https://sonarcloud.io" \
          /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml"

    - name: Ejecutar tests con cobertura y umbral
      run: |
        dotnet test MeteoService/MeteoService.csproj \
          --no-build --verbosity normal \
          /p:CollectCoverage=true \
          /p:CoverletOutputFormat=cobertura \
          /p:Threshold=20 \
          /p:ThresholdType=line \
          /p:ThresholdStat=total

    - name: Finaliza Analisis con SonarCloud
      run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

    - name: Esperando Quality Gate
      run: sleep 15

    - name: Revisando el estado del Quality Gate
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        PROJECT_KEY="leferba1981_meteolive"
        ORGANIZATION="leferba1981"

        STATUS=$(curl -s -u $SONAR_TOKEN: \
          "https://sonarcloud.io/api/qualitygates/project_status?projectKey=$PROJECT_KEY" \
          | jq -r '.projectStatus.status')

        echo "SonarCloud Quality Gate status: $STATUS"

        if [[ "$STATUS" != "OK" ]]; then
          echo "❌ Quality Gate falló (estado: $STATUS)"
          exit 1
        else
          echo "✅ Quality Gate aprobado"
        fi

    - name: Construir imagen Docker
      run: |
        docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:$VERSION .

    - name: Login en Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Push de imagen Docker
      run: |
        docker push $IMAGE_NAME:latest
        docker push $IMAGE_NAME:$VERSION

    - name: Actualizar tag de imagen en Helm values.yaml
      run: |
        sed -i "s/tag: .*/tag: ${VERSION}/" charts/meteolive/values.yaml

    - name: Configurar Git
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"

    - name: Commit y push del nuevo tag en values.yaml
      run: |
        git add charts/meteolive/values.yaml
        git commit -m "chore: update image tag to ${VERSION}"
        git push origin main
