name: CI/CD - Build --> Push Imagen Docker -> Actualizar Helm

on:
  push:
    branches: [main]

env:
  IMAGE_NAME: leferbadck/meteolive
  VERSION: 1.0.${{ github.run_number }}         # Para .NET
  VERSION_TAG: v1.0.${{ github.run_number }}    # Para Docker


jobs:
  prepare-code:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v3

    - name: Instalar .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

  test-and-build:
    runs-on: ubuntu-latest
    needs: prepare-code
    
    steps:
      - name: Restaurar dependencias
        run: dotnet restore MeteoLive/MeteoService/MeteoService.csproj

      - name: Compilar proyecto
        run: dotnet build MeteoLive/MeteoService/MeteoService.csproj --configuration Release --no-restore

      - name: Ejecutar tests
        run: dotnet test MeteoLive/MeteoService/MeteoService.csproj --no-build --verbosity normal

  docker-push:
    runs-on: ubuntu-latest
    needs: test-and-build
    steps:
      - name: Construir imagen Docker
        run: |
          docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:$VERSION .

      - name: Login en Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push de imagen Docker
        run: |
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$VERSION

  update-helm:
    runs-on: ubuntu-latest
    needs: docker-push
    steps:
      - name: Actualizar tag de imagen en Helm values.yaml
        run: |
          sed -i "s/tag: .*/tag: ${VERSION}/" charts/meteolive/values.yaml

      - name: Configurar Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Commit y push del nuevo tag en values.yaml
        run: |
          git add charts/meteolive/values.yaml
          git commit -m "chore: update image tag to ${VERSION}"
          git push origin main
